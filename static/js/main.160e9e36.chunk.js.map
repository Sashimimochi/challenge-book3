{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","contents","componentDidMount","bind","Axios","get","then","results","data","setState","classes","this","opts","height","width","playerVars","autoplay","map","content","Card","className","card","CardContent","key","id","title","align","videoId","videoid","description","AppBar","Toolbar","Typography","dataSource","sourceType","screenName","options","username","onLoad","console","log","Component","withStyles","margin","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"gWAeMA,E,kDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,SAAU,IAEZ,EAAKC,kBAAoB,EAAKA,kBAAkBC,KAAvB,gBALR,E,gEAQE,IAAD,OAClBC,IACGC,IAAI,oGACJC,MAAK,SAAAC,GACJ,IAAMC,EAAOD,EAAQC,KACrB,EAAKC,SAAS,CACZR,SAAS,YAAKO,U,+BAMpB,IAAME,EAAUC,KAAKZ,MAAMW,QAErBE,EAAO,CACXC,OAAQ,MACRC,MAAO,MACPC,WAAY,CACVC,SAAU,IAIRf,EAAWU,KAAKX,MAAMC,SAASgB,KAAI,SAAAC,GACvC,OACE,kBAACC,EAAA,EAAD,CAAMC,UAAWV,EAAQW,MACvB,kBAACC,EAAA,EAAD,KACE,wBAAIC,IAAKL,EAAQM,IAAKN,EAAQO,OAC9B,yBAAKC,MAAM,SAASH,IAAKL,EAAQM,IAC/B,kBAAC,IAAD,CACEG,QAAST,EAAQU,QACjBhB,KAAMA,KAGV,uBAAGW,IAAKL,EAAQM,IAAKN,EAAQW,kBAMrC,OACE,kBAAC,WAAD,KACE,yBAAKT,UAAU,OACb,kBAACU,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,sFAGJ,4BAAQZ,UAAU,cAChB,kGACA,0HAEDnB,EACD,kBAAC,WAAD,CACEgC,WAAY,CACVC,WAAY,UACZC,WAAY,mBAEdC,QAAS,CACPC,SAAU,kBACVvB,MAAO,MACPD,OAAQ,OAEVyB,OAAQ,kBAAMC,QAAQC,IAAI,gC,GAvEpBC,aAgFHC,cAvFA,CACbrB,KAAM,CACJsB,OAAQ,GACR9B,OAAQ,MAoFG6B,CAAmB5C,GCnFd8C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlD,MAAK,SAAAmD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrB,QAAQqB,MAAMA,EAAMC,a","file":"static/js/main.160e9e36.chunk.js","sourcesContent":["import React, { Component, Fragment } from \"react\";\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Axios from 'axios';\r\nimport { Card, CardContent, AppBar, Toolbar, Typography } from \"@material-ui/core\";\r\nimport \"./App.css\";\r\nimport YouTube from \"react-youtube\";\r\nimport { Timeline } from \"react-twitter-widgets\";\r\n\r\nconst styles = {\r\n  card: {\r\n    margin: 20,\r\n    height: 580\r\n  },\r\n};\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      contents: []\r\n    };\r\n    this.componentDidMount = this.componentDidMount.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    Axios\r\n      .get(\"https://script.google.com/macros/s/AKfycby4n5StsudMhLNklMXUKe8vZ9AbtCf43XoFJLul1_0Yd_cai69i/exec\") //GASのURL\r\n      .then(results => {\r\n        const data = results.data;\r\n        this.setState({\r\n          contents: [...data]\r\n        });\r\n      });\r\n  }\r\n\r\n  render() {\r\n    const classes = this.props.classes;\r\n\r\n    const opts = {\r\n      height: \"390\",\r\n      width: \"640\",\r\n      playerVars: {\r\n        autoplay: 0\r\n      }\r\n    };\r\n\r\n    const contents = this.state.contents.map(content => {\r\n      return (\r\n        <Card className={classes.card}>\r\n          <CardContent>\r\n            <h2 key={content.id}>{content.title}</h2>\r\n            <div align=\"center\" key={content.id}>\r\n              <YouTube\r\n                videoId={content.videoid}\r\n                opts={opts}\r\n              ></YouTube>\r\n            </div>\r\n            <p key={content.id}>{content.description}</p>\r\n          </CardContent>\r\n        </Card>\r\n      )\r\n    });\r\n\r\n    return (\r\n      <Fragment>\r\n        <div className=\"App\">\r\n          <AppBar>\r\n            <Toolbar>\r\n              <Typography>React&amp;GASで動的ホームページ制作</Typography>\r\n            </Toolbar>\r\n          </AppBar>\r\n          <header className=\"App-header\">\r\n            <h1>ホームページへようこそ</h1>\r\n            <p>ここにホームページの概要を書く</p>\r\n          </header>\r\n          {contents}\r\n          <Timeline\r\n            dataSource={{\r\n              sourceType: \"profile\",\r\n              screenName: \"Sashimimochi343\"\r\n            }}\r\n            options={{\r\n              username: \"Sashimimochi343\",\r\n              width: \"50%\",\r\n              height: \"400\"\r\n            }}\r\n            onLoad={() => console.log(\"Timeline is loaded!\")}>\r\n          </Timeline>\r\n        </div>\r\n      </Fragment>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nexport default withStyles(styles)(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}